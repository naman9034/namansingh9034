# -*- coding: utf-8 -*-
"""number of order prediction .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17nldugz2pirWpcxdTS3c459zUyBHBOQJ
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib as plt

path = 'https://github.com/naman9034/admission-pre/raw/main/TRAIN.csv'
#print(open(path).read())
data = pd.read_csv(path)

data

data.info()

data.isnull().sum()

data.describe()

sns.pairplot(data)

import plotly.express as px

pie = data["Store_id"].value_counts()
store = pie.index
orders = pie.values

fig = px.pie(data, values=orders, names=store)
fig.show()

pie = data["Store_Type"].value_counts()
store = pie.index
orders = pie.values

fig = px.pie(data, values=orders, names=store)
fig.show()

pie2 = data["Location_Type"].value_counts()
Location = pie2.index
orders = pie2.values

fig = px.pie(data, values=orders, names=Location)
fig.show()

pie3 = data["Discount"].value_counts()
store = pie3.index
orders = pie3.values

fig = px.pie(data, values=orders, names=store)
fig.show()

data["Discount"] = data["Discount"].map({"No": 0, "Yes": 1})

data

data["Store_Type"] = data["Store_Type"].map({"S1": 1, "S2": 2 , "S3": 3, "S4": 4})

data

data["Location_Type"] = data["Location_Type"].map({"L1": 1, "L2": 2 , "L3": 3, "L4": 4 , "L5": 5})

data

data.columns

X = np.array(data[['Store_Type', 'Location_Type','Holiday', 'Discount']])
y = np.array(data['#Order'])

X

y

#building the ml model
from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.30)

len(X_train)

#pip install Lightgbm
import lightgbm as ltb
model = ltb.LGBMRegressor()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

y_pred

y_test

ps = pd.DataFrame(data={"predicted Orders": y_pred.flatten()})

ps

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_test, y_pred)
rmse = mse**(0.5)
print("MSE: %.2f" % mse)
print("RMSE: %.2f" % rmse)

import matplotlib.pyplot as plt

# visualizing in a plot
x_ax = range(len(y_test))
plt.figure(figsize=(12, 6))
plt.plot(x_ax, y_test, label="original")
plt.plot(x_ax, y_pred, label="predicted")
plt.title("Boston dataset test and predicted data")
plt.xlabel('X')
plt.ylabel('Price')
plt.legend(loc='best',fancybox=True, shadow=True)
plt.grid(True)
plt.show()

# plotting feature importance
ltb.plot_importance(model)

from sklearn import metrics

print(metrics.r2_score(y_test, y_pred))
print(metrics.mean_squared_log_error(y_test, y_pred))

ltb.plot_tree(model,figsize=(30,40))

